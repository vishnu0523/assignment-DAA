import heapq
def minimum_cost_to_buy_apples(n, roads, appleCost, k):
    adj = {i: [] for i in range(n)}
    for u, v, cost in roads:
        adj[u - 1].append((v - 1, cost))
        adj[v - 1].append((u - 1, cost))

    def dijkstra(start):
        min_heap = [(0, start)]
        dist = [float('inf')] * n
        dist[start] = 0
        
        while min_heap:
            d, u = heapq.heappop(min_heap)
            
            if d > dist[u]:
                continue
            
            for v, cost in adj[u]:
                if dist[v] > d + cost:
                    dist[v] = d + cost
                    heapq.heappush(min_heap, (dist[v], v))
                    
        return dist

    results = []
    for i in range(n):
        dists = dijkstra(i)
        min_cost = float('inf')
        
        for j in range(n):
            if i != j:
                total_cost = dists[j] + appleCost[j] + dists[j] * k
                min_cost = min(min_cost, total_cost)
            else:
                min_cost = min(min_cost, appleCost[j])
        
        results.append(min_cost)
    
    return results
n = 3
roads = [[1,2,5],[2,3,1],[3,1,2]]
appleCost = [2,3,1]
k = 3
print(minimum_cost_to_buy_apples(n, roads, appleCost, k))  
