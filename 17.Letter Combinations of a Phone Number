def letter_combinations(digits):
    if not digits:
        return []
    
    # Mapping of digits to corresponding letters
    phone_map = {
        '2': 'abc', '3': 'def', '4': 'ghi', '5': 'jkl', 
        '6': 'mno', '7': 'pqrs', '8': 'tuv', '9': 'wxyz'
    }
    
    # List to hold the result combinations
    result = []
    
    # Helper function to perform the recursion
    def backtrack(index, current_combination):
        if index == len(digits):
            result.append(current_combination)
            return
        
        current_digit = digits[index]
        for letter in phone_map[current_digit]:
            backtrack(index + 1, current_combination + letter)
    
    # Start the recursive process
    backtrack(0, "")
    return result

# Example usage
print(letter_combinations("23"))  # Output: ['ad', 'ae', 'af', 'bd', 'be', 'bf', 'cd', 'ce', 'cf']
print(letter_combinations(""))    # Output: []
print(letter_combinations("2"))   # Output: ['a', 'b', 'c']
