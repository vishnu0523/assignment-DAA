import math

def closest_pair(points):
    def distance(p1, p2):
        return math.sqrt((p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2)

    def closest_pair_rec(px, py):
        if len(px) <= 3:
            min_dist = float('inf')
            for i in range(len(px)):
                for j in range(i + 1, len(px)):
                    min_dist = min(min_dist, distance(px[i], px[j]))
            return min_dist

        mid = len(px) // 2
        mid_point = px[mid]

        Qx = px[:mid]
        Rx = px[mid:]

        midpoint = px[mid][0]
        Qy = list(filter(lambda x: x[0] <= midpoint, py))
        Ry = list(filter(lambda x: x[0] > midpoint, py))

        delta = min(closest_pair_rec(Qx, Qy), closest_pair_rec(Rx, Ry))

        strip = [p for p in py if abs(p[0] - mid_point[0]) < delta]
        min_dist_strip = delta

        for i in range(len(strip)):
            for j in range(i + 1, min(i + 7, len(strip))):
                min_dist_strip = min(min_dist_strip, distance(strip[i], strip[j]))

        return min_dist_strip

    px = sorted(points, key=lambda x: x[0])
    py = sorted(points, key=lambda x: x[1])

    return closest_pair_rec(px, py)

points = [(2.1, 3.4), (4.6, 1.2), (1.1, 2.4), (7.2, 8.1), (3.4, 4.2)]
result = closest_pair(points)
print(f"Closest distance: {result}")
