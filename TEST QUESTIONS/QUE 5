from collections import deque

def update_distances(mat, distances, queue):
    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]
    m, n = len(mat), len(mat[0])
    
    while queue:
        r, c = queue.popleft()
        
        for dr, dc in directions:
            nr, nc = r + dr, c + dc
            if 0 <= nr < m and 0 <= nc < n and distances[nr][nc] == float('inf'):
                distances[nr][nc] = distances[r][c] + 1
                queue.append((nr, nc))

def update_matrix(mat):
    if not mat:
        return mat
    
    m, n = len(mat), len(mat[0])
    distances = [[float('inf')] * n for _ in range(m)]
    queue = deque()
    for r in range(m):
        for c in range(n):
            if mat[r][c] == 0:
                distances[r][c] = 0
                queue.append((r, c))
    update_distances(mat, distances, queue)
    
    return distances
mat1 = [[0, 0, 0], [0, 1, 0], [0, 0, 0]]
mat2 = [[0, 0, 0], [0, 1, 0], [1, 1, 1]]

print(update_matrix(mat1)) 
print(update_matrix(mat2))  
