from collections import deque, defaultdict
def most_profitable_path(edges, bob, amount):
    tree = defaultdict(list)
    for a, b in edges:
        tree[a].append(b)
        tree[b].append(a)
    def bfs(start):
        time_to_reach = [-1] * len(amount)
        queue = deque([(start, 0)])
        time_to_reach[start] = 0
        
        while queue:
            node, time = queue.popleft()
            for neighbor in tree[node]:
                if time_to_reach[neighbor] == -1:
                    time_to_reach[neighbor] = time + 1
                    queue.append((neighbor, time + 1))
        
        return time_to_reach
    bob_time = bfs(bob)
    def dfs(node, parent, current_profit, current_time):
        if bob_time[node] == -1 or bob_time[node] > current_time:
            profit = amount[node]
        elif bob_time[node] == current_time:
            profit = amount[node] // 2
        else:
            profit = 0
        current_profit += profit
        if len(tree[node]) == 1 and node != 0:
            return current_profit
        
        max_profit = float('-inf')
        for neighbor in tree[node]:
            if neighbor != parent:
                max_profit = max(max_profit, dfs(neighbor, node, current_profit, current_time + 1))
        
        return max_profit
    return dfs(0, -1, 0, 0)
edges = [[0,1]]
bob = 1
amount = [-7280,2350]

print(most_profitable_path(edges, bob, amount))  
