import heapq
from collections import defaultdict

def dijkstra_edge_list(n, edges, source, target):
    graph = defaultdict(list)
    for u, v, w in edges:
        graph[u].append((v, w))
        graph[v].append((u, w))  # If the graph is undirected
    
    dist = [float('inf')] * n
    dist[source] = 0
    pq = [(0, source)]
    visited = [False] * n
    
    while pq:
        current_dist, u = heapq.heappop(pq)
        
        if u == target:
            return current_dist
        
        if visited[u]:
            continue
        
        visited[u] = True
        
        for v, weight in graph[u]:
            if not visited[v]:
                new_dist = current_dist + weight
                if new_dist < dist[v]:
                    dist[v] = new_dist
                    heapq.heappush(pq, (new_dist, v))
                    
    return dist[target]

# Test Case 1
n1 = 6
edges1 = [
    (0, 1, 7), (0, 2, 9), (0, 5, 14),
    (1, 2, 10), (1, 3, 15),
    (2, 3, 11), (2, 5, 2),
    (3, 4, 6), (4, 5, 9)
]
source1 = 0
target1 = 4
print(dijkstra_edge_list(n1, edges1, source1, target1))  # Output: 20

# Test Case 2
n2 = 5
edges2 = [
    (0, 1, 10), (0, 4, 3),
    (1, 2, 2), (1, 4, 4),
    (2, 3, 9), (3, 2, 7),
    (4, 1, 1), (4, 2, 8), (4, 3, 2)
]
source2 = 0
target2 = 3
print(dijkstra_edge_list(n2, edges2, source2, target2))  # Output: 8
