import heapq

def dijkstra_matrix(n, graph, source):
    dist = [float('inf')] * n
    dist[source] = 0
    pq = [(0, source)]
    visited = [False] * n
    
    while pq:
        current_dist, u = heapq.heappop(pq)
        
        if visited[u]:
            continue
        
        visited[u] = True
        
        for v in range(n):
            if graph[u][v] != float('inf') and not visited[v]:
                new_dist = current_dist + graph[u][v]
                if new_dist < dist[v]:
                    dist[v] = new_dist
                    heapq.heappush(pq, (new_dist, v))
                    
    return dist

# Test Case 1
n1 = 5
graph1 = [
    [0, 10, 3, float('inf'), float('inf')],
    [float('inf'), 0, 1, 2, float('inf')],
    [float('inf'), 4, 0, 8, 2],
    [float('inf'), float('inf'), float('inf'), 0, 7],
    [float('inf'), float('inf'), float('inf'), 9, 0]
]
source1 = 0
print(dijkstra_matrix(n1, graph1, source1))  # Output: [0, 7, 3, 9, 5]

# Test Case 2
n2 = 4
graph2 = [
    [0, 5, float('inf'), 10],
    [float('inf'), 0, 3, float('inf')],
    [float('inf'), float('inf'), 0, 1],
    [float('inf'), float('inf'), float('inf'), 0]
]
source2 = 0
print(dijkstra_matrix(n2, graph2, source2))  # Output: [0, 5, 8, 9]
