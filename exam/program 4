def combinationSum(candidates, target):
    def backtrack(start, current_combination, current_sum):
        if current_sum == target:
            results.append(list(current_combination))
            return
        elif current_sum > target:
            return
        
        for i in range(start, len(candidates)):
            current_combination.append(candidates[i])
            backtrack(i, current_combination, current_sum + candidates[i])
          
            current_combination.pop()
    
    results = []
    candidates.sort()  # Optional, but can help with optimizations
    backtrack(0, [], 0)
    return results


candidates = [2, 3, 6, 7]
target = 7
print(combinationSum(candidates, target))  # Output: [[2, 2, 3], [7]]
